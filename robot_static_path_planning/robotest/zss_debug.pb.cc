// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_debug.proto

#include "zss_debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Arc_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Debug_Curve__zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Line_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Debug_Msg_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Points_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Polygon_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Robot_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Score_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Text_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_zss_5fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rectangle__zss_5fdebug_2eproto;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class Rectangle_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rectangle_> _instance;
} _Rectangle__default_instance_;
class Debug_RobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Robot> _instance;
} _Debug_Robot_default_instance_;
class Debug_LineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Line> _instance;
} _Debug_Line_default_instance_;
class Debug_ArcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Arc> _instance;
} _Debug_Arc_default_instance_;
class Debug_PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Polygon> _instance;
} _Debug_Polygon_default_instance_;
class Debug_TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Text> _instance;
} _Debug_Text_default_instance_;
class Debug_Curve_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Curve_> _instance;
} _Debug_Curve__default_instance_;
class Debug_CurveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Curve> _instance;
} _Debug_Curve_default_instance_;
class Debug_PointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Points> _instance;
} _Debug_Points_default_instance_;
class Debug_MsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Msg> _instance;
} _Debug_Msg_default_instance_;
class Debug_MsgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Msgs> _instance;
} _Debug_Msgs_default_instance_;
class Debug_ScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Score> _instance;
} _Debug_Score_default_instance_;
class Debug_ScoresDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug_Scores> _instance;
} _Debug_Scores_default_instance_;
static void InitDefaultsscc_info_Debug_Arc_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Arc_default_instance_;
    new (ptr) ::Debug_Arc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Arc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Arc_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Arc_zss_5fdebug_2eproto}, {
      &scc_info_Rectangle__zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Curve_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Curve_default_instance_;
    new (ptr) ::Debug_Curve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Curve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Curve_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Curve_zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Curve__zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Curve__default_instance_;
    new (ptr) ::Debug_Curve_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Curve_::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Debug_Curve__zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Debug_Curve__zss_5fdebug_2eproto}, {}};

static void InitDefaultsscc_info_Debug_Line_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Line_default_instance_;
    new (ptr) ::Debug_Line();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Line::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Line_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Line_zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Msg_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Msg_default_instance_;
    new (ptr) ::Debug_Msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Debug_Msg_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_Debug_Msg_zss_5fdebug_2eproto}, {
      &scc_info_Debug_Arc_zss_5fdebug_2eproto.base,
      &scc_info_Debug_Line_zss_5fdebug_2eproto.base,
      &scc_info_Debug_Text_zss_5fdebug_2eproto.base,
      &scc_info_Debug_Robot_zss_5fdebug_2eproto.base,
      &scc_info_Debug_Curve__zss_5fdebug_2eproto.base,
      &scc_info_Debug_Polygon_zss_5fdebug_2eproto.base,
      &scc_info_Debug_Points_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Msgs_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Msgs_default_instance_;
    new (ptr) ::Debug_Msgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Msgs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Msgs_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Msgs_zss_5fdebug_2eproto}, {
      &scc_info_Debug_Msg_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Points_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Points_default_instance_;
    new (ptr) ::Debug_Points();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Points::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Points_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Points_zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Polygon_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Polygon_default_instance_;
    new (ptr) ::Debug_Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Polygon_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Polygon_zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Robot_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Robot_default_instance_;
    new (ptr) ::Debug_Robot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Robot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Robot_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Robot_zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Score_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Score_default_instance_;
    new (ptr) ::Debug_Score();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Score::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Score_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Score_zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Scores_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Scores_default_instance_;
    new (ptr) ::Debug_Scores();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Scores::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Scores_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Scores_zss_5fdebug_2eproto}, {
      &scc_info_Debug_Score_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Debug_Text_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Debug_Text_default_instance_;
    new (ptr) ::Debug_Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Debug_Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Debug_Text_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Debug_Text_zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static void InitDefaultsscc_info_Point_zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Point_default_instance_;
    new (ptr) ::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Point_zss_5fdebug_2eproto}, {}};

static void InitDefaultsscc_info_Rectangle__zss_5fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rectangle__default_instance_;
    new (ptr) ::Rectangle_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rectangle_::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rectangle__zss_5fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Rectangle__zss_5fdebug_2eproto}, {
      &scc_info_Point_zss_5fdebug_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zss_5fdebug_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zss_5fdebug_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zss_5fdebug_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zss_5fdebug_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Point, x_),
  PROTOBUF_FIELD_OFFSET(::Point, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Rectangle_, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Rectangle_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rectangle_, point1_),
  PROTOBUF_FIELD_OFFSET(::Rectangle_, point2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Debug_Robot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Robot, pos_),
  PROTOBUF_FIELD_OFFSET(::Debug_Robot, dir_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Debug_Line, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Line, start_),
  PROTOBUF_FIELD_OFFSET(::Debug_Line, end_),
  PROTOBUF_FIELD_OFFSET(::Debug_Line, forward_),
  PROTOBUF_FIELD_OFFSET(::Debug_Line, back_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Debug_Arc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Arc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Arc, rectangle_),
  PROTOBUF_FIELD_OFFSET(::Debug_Arc, start_),
  PROTOBUF_FIELD_OFFSET(::Debug_Arc, end_),
  PROTOBUF_FIELD_OFFSET(::Debug_Arc, fill_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Debug_Polygon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Polygon, vertex_),
  PROTOBUF_FIELD_OFFSET(::Debug_Polygon, fill_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::Debug_Text, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Text, pos_),
  PROTOBUF_FIELD_OFFSET(::Debug_Text, text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Debug_Curve_, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Curve_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Curve_, num_),
  PROTOBUF_FIELD_OFFSET(::Debug_Curve_, maxlimit_),
  PROTOBUF_FIELD_OFFSET(::Debug_Curve_, minlimit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Debug_Curve, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Curve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Curve, start_),
  PROTOBUF_FIELD_OFFSET(::Debug_Curve, p1_),
  PROTOBUF_FIELD_OFFSET(::Debug_Curve, p2_),
  PROTOBUF_FIELD_OFFSET(::Debug_Curve, end_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Debug_Points, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Points, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Points, point_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, type_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, color_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, arc_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, line_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, text_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, robot_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, curve_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, polygon_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msg, points_),
  7,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::Debug_Msgs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Msgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Msgs, msgs_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Debug_Score, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Score, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Score, color_),
  PROTOBUF_FIELD_OFFSET(::Debug_Score, p_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Debug_Scores, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Debug_Scores, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Debug_Scores, scores_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Point)},
  { 9, 16, sizeof(::Rectangle_)},
  { 18, 25, sizeof(::Debug_Robot)},
  { 27, 36, sizeof(::Debug_Line)},
  { 40, 49, sizeof(::Debug_Arc)},
  { 53, 60, sizeof(::Debug_Polygon)},
  { 62, 69, sizeof(::Debug_Text)},
  { 71, 79, sizeof(::Debug_Curve_)},
  { 82, 91, sizeof(::Debug_Curve)},
  { 95, 101, sizeof(::Debug_Points)},
  { 102, 116, sizeof(::Debug_Msg)},
  { 125, 131, sizeof(::Debug_Msgs)},
  { 132, 139, sizeof(::Debug_Score)},
  { 141, 147, sizeof(::Debug_Scores)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Rectangle__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Robot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Line_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Arc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Curve__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Curve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Points_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Msgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Score_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Debug_Scores_default_instance_),
};

const char descriptor_table_protodef_zss_5fdebug_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017zss_debug.proto\"\035\n\005Point\022\t\n\001x\030\001 \002(\002\022\t\n"
  "\001y\030\002 \002(\002\"<\n\nRectangle_\022\026\n\006point1\030\001 \002(\0132\006"
  ".Point\022\026\n\006point2\030\002 \002(\0132\006.Point\"/\n\013Debug_"
  "Robot\022\023\n\003pos\030\001 \002(\0132\006.Point\022\013\n\003dir\030\002 \002(\002\""
  "W\n\nDebug_Line\022\025\n\005start\030\001 \002(\0132\006.Point\022\023\n\003"
  "end\030\002 \002(\0132\006.Point\022\017\n\007FORWARD\030\003 \002(\010\022\014\n\004BA"
  "CK\030\004 \002(\010\"U\n\tDebug_Arc\022\036\n\trectangle\030\001 \002(\013"
  "2\013.Rectangle_\022\r\n\005start\030\002 \002(\002\022\013\n\003end\030\003 \002("
  "\002\022\014\n\004FILL\030\004 \002(\010\"5\n\rDebug_Polygon\022\026\n\006vert"
  "ex\030\001 \003(\0132\006.Point\022\014\n\004FILL\030\002 \002(\010\"/\n\nDebug_"
  "Text\022\023\n\003pos\030\001 \002(\0132\006.Point\022\014\n\004text\030\002 \002(\t\""
  "\?\n\014Debug_Curve_\022\013\n\003num\030\001 \002(\002\022\020\n\010maxLimit"
  "\030\002 \002(\002\022\020\n\010minLimit\030\003 \002(\002\"a\n\013Debug_Curve\022"
  "\025\n\005start\030\001 \002(\0132\006.Point\022\022\n\002p1\030\002 \002(\0132\006.Poi"
  "nt\022\022\n\002p2\030\003 \002(\0132\006.Point\022\023\n\003end\030\004 \002(\0132\006.Po"
  "int\"%\n\014Debug_Points\022\025\n\005point\030\001 \003(\0132\006.Poi"
  "nt\"\352\003\n\tDebug_Msg\022#\n\004type\030\001 \002(\0162\025.Debug_M"
  "sg.Debug_Type\022\037\n\005color\030\002 \002(\0162\020.Debug_Msg"
  ".Color\022\027\n\003arc\030\003 \001(\0132\n.Debug_Arc\022\031\n\004line\030"
  "\004 \001(\0132\013.Debug_Line\022\031\n\004text\030\005 \001(\0132\013.Debug"
  "_Text\022\033\n\005robot\030\006 \001(\0132\014.Debug_Robot\022\034\n\005cu"
  "rve\030\007 \001(\0132\r.Debug_Curve_\022\037\n\007polygon\030\010 \001("
  "\0132\016.Debug_Polygon\022\035\n\006points\030\t \001(\0132\r.Debu"
  "g_Points\"X\n\nDebug_Type\022\007\n\003ARC\020\000\022\010\n\004LINE\020"
  "\001\022\010\n\004TEXT\020\002\022\t\n\005ROBOT\020\003\022\t\n\005CURVE\020\004\022\013\n\007POL"
  "YGON\020\005\022\n\n\006Points\020\006\"s\n\005Color\022\t\n\005WHITE\020\000\022\007"
  "\n\003RED\020\001\022\n\n\006ORANGE\020\002\022\n\n\006YELLOW\020\003\022\t\n\005GREEN"
  "\020\004\022\010\n\004CYAN\020\005\022\010\n\004BLUE\020\006\022\n\n\006PURPLE\020\007\022\010\n\004GR"
  "AY\020\010\022\t\n\005BLACK\020\t\"&\n\nDebug_Msgs\022\030\n\004msgs\030\001 "
  "\003(\0132\n.Debug_Msg\"/\n\013Debug_Score\022\r\n\005color\030"
  "\001 \002(\005\022\021\n\001p\030\002 \003(\0132\006.Point\",\n\014Debug_Scores"
  "\022\034\n\006scores\030\001 \003(\0132\014.Debug_Score"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zss_5fdebug_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zss_5fdebug_2eproto_sccs[14] = {
  &scc_info_Debug_Arc_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Curve_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Curve__zss_5fdebug_2eproto.base,
  &scc_info_Debug_Line_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Msg_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Msgs_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Points_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Polygon_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Robot_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Score_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Scores_zss_5fdebug_2eproto.base,
  &scc_info_Debug_Text_zss_5fdebug_2eproto.base,
  &scc_info_Point_zss_5fdebug_2eproto.base,
  &scc_info_Rectangle__zss_5fdebug_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zss_5fdebug_2eproto_once;
static bool descriptor_table_zss_5fdebug_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fdebug_2eproto = {
  &descriptor_table_zss_5fdebug_2eproto_initialized, descriptor_table_protodef_zss_5fdebug_2eproto, "zss_debug.proto", 1270,
  &descriptor_table_zss_5fdebug_2eproto_once, descriptor_table_zss_5fdebug_2eproto_sccs, descriptor_table_zss_5fdebug_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_zss_5fdebug_2eproto::offsets,
  file_level_metadata_zss_5fdebug_2eproto, 14, file_level_enum_descriptors_zss_5fdebug_2eproto, file_level_service_descriptors_zss_5fdebug_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zss_5fdebug_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zss_5fdebug_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Debug_Msg_Debug_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5fdebug_2eproto);
  return file_level_enum_descriptors_zss_5fdebug_2eproto[0];
}
bool Debug_Msg_Debug_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Debug_Msg_Debug_Type Debug_Msg::ARC;
constexpr Debug_Msg_Debug_Type Debug_Msg::LINE;
constexpr Debug_Msg_Debug_Type Debug_Msg::TEXT;
constexpr Debug_Msg_Debug_Type Debug_Msg::ROBOT;
constexpr Debug_Msg_Debug_Type Debug_Msg::CURVE;
constexpr Debug_Msg_Debug_Type Debug_Msg::POLYGON;
constexpr Debug_Msg_Debug_Type Debug_Msg::Points;
constexpr Debug_Msg_Debug_Type Debug_Msg::Debug_Type_MIN;
constexpr Debug_Msg_Debug_Type Debug_Msg::Debug_Type_MAX;
constexpr int Debug_Msg::Debug_Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Debug_Msg_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5fdebug_2eproto);
  return file_level_enum_descriptors_zss_5fdebug_2eproto[1];
}
bool Debug_Msg_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Debug_Msg_Color Debug_Msg::WHITE;
constexpr Debug_Msg_Color Debug_Msg::RED;
constexpr Debug_Msg_Color Debug_Msg::ORANGE;
constexpr Debug_Msg_Color Debug_Msg::YELLOW;
constexpr Debug_Msg_Color Debug_Msg::GREEN;
constexpr Debug_Msg_Color Debug_Msg::CYAN;
constexpr Debug_Msg_Color Debug_Msg::BLUE;
constexpr Debug_Msg_Color Debug_Msg::PURPLE;
constexpr Debug_Msg_Color Debug_Msg::GRAY;
constexpr Debug_Msg_Color Debug_Msg::BLACK;
constexpr Debug_Msg_Color Debug_Msg::Color_MIN;
constexpr Debug_Msg_Color Debug_Msg::Color_MAX;
constexpr int Debug_Msg::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point::Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Point)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Point)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Point)
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Point)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rectangle_::InitAsDefaultInstance() {
  ::_Rectangle__default_instance_._instance.get_mutable()->point1_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_Rectangle__default_instance_._instance.get_mutable()->point2_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
}
class Rectangle_::_Internal {
 public:
  using HasBits = decltype(std::declval<Rectangle_>()._has_bits_);
  static const ::Point& point1(const Rectangle_* msg);
  static void set_has_point1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Point& point2(const Rectangle_* msg);
  static void set_has_point2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Point&
Rectangle_::_Internal::point1(const Rectangle_* msg) {
  return *msg->point1_;
}
const ::Point&
Rectangle_::_Internal::point2(const Rectangle_* msg) {
  return *msg->point2_;
}
Rectangle_::Rectangle_()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rectangle_)
}
Rectangle_::Rectangle_(const Rectangle_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point1()) {
    point1_ = new ::Point(*from.point1_);
  } else {
    point1_ = nullptr;
  }
  if (from.has_point2()) {
    point2_ = new ::Point(*from.point2_);
  } else {
    point2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Rectangle_)
}

void Rectangle_::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rectangle__zss_5fdebug_2eproto.base);
  ::memset(&point1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point2_) -
      reinterpret_cast<char*>(&point1_)) + sizeof(point2_));
}

Rectangle_::~Rectangle_() {
  // @@protoc_insertion_point(destructor:Rectangle_)
  SharedDtor();
}

void Rectangle_::SharedDtor() {
  if (this != internal_default_instance()) delete point1_;
  if (this != internal_default_instance()) delete point2_;
}

void Rectangle_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rectangle_& Rectangle_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rectangle__zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Rectangle_::Clear() {
// @@protoc_insertion_point(message_clear_start:Rectangle_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(point1_ != nullptr);
      point1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(point2_ != nullptr);
      point2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rectangle_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Point point1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_point1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Point point2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_point2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rectangle_::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rectangle_)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point point1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Point point2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rectangle_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rectangle_)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rectangle_::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rectangle_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point point1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::point1(this), output);
  }

  // required .Point point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::point2(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Rectangle_)
}

::PROTOBUF_NAMESPACE_ID::uint8* Rectangle_::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rectangle_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point point1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::point1(this), target);
  }

  // required .Point point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::point2(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rectangle_)
  return target;
}

size_t Rectangle_::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Rectangle_)
  size_t total_size = 0;

  if (has_point1()) {
    // required .Point point1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point1_);
  }

  if (has_point2()) {
    // required .Point point2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point2_);
  }

  return total_size;
}
size_t Rectangle_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rectangle_)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Point point1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point1_);

    // required .Point point2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point2_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rectangle_)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rectangle_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rectangle_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rectangle_)
    MergeFrom(*source);
  }
}

void Rectangle_::MergeFrom(const Rectangle_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rectangle_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_point1()->::Point::MergeFrom(from.point1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_point2()->::Point::MergeFrom(from.point2());
    }
  }
}

void Rectangle_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rectangle_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle_::CopyFrom(const Rectangle_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rectangle_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle_::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_point1()) {
    if (!this->point1_->IsInitialized()) return false;
  }
  if (has_point2()) {
    if (!this->point2_->IsInitialized()) return false;
  }
  return true;
}

void Rectangle_::InternalSwap(Rectangle_* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(point1_, other->point1_);
  swap(point2_, other->point2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Robot::InitAsDefaultInstance() {
  ::_Debug_Robot_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
}
class Debug_Robot::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Robot>()._has_bits_);
  static const ::Point& pos(const Debug_Robot* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Point&
Debug_Robot::_Internal::pos(const Debug_Robot* msg) {
  return *msg->pos_;
}
Debug_Robot::Debug_Robot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Robot)
}
Debug_Robot::Debug_Robot(const Debug_Robot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Point(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  dir_ = from.dir_;
  // @@protoc_insertion_point(copy_constructor:Debug_Robot)
}

void Debug_Robot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Robot_zss_5fdebug_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(dir_));
}

Debug_Robot::~Debug_Robot() {
  // @@protoc_insertion_point(destructor:Debug_Robot)
  SharedDtor();
}

void Debug_Robot::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Debug_Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Robot& Debug_Robot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Robot_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != nullptr);
    pos_->Clear();
  }
  dir_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Robot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Point pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Robot::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Robot)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dir = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_dir(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Robot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Robot::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pos(this), output);
  }

  // required float dir = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Robot)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Robot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pos(this), target);
  }

  // required float dir = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Robot)
  return target;
}

size_t Debug_Robot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Robot)
  size_t total_size = 0;

  if (has_pos()) {
    // required .Point pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (has_dir()) {
    // required float dir = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Debug_Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Point pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required float dir = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Robot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Robot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Robot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Robot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Robot)
    MergeFrom(*source);
  }
}

void Debug_Robot::MergeFrom(const Debug_Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::Point::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_Robot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Robot::CopyFrom(const Debug_Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void Debug_Robot::InternalSwap(Debug_Robot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Robot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Line::InitAsDefaultInstance() {
  ::_Debug_Line_default_instance_._instance.get_mutable()->start_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_Debug_Line_default_instance_._instance.get_mutable()->end_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
}
class Debug_Line::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Line>()._has_bits_);
  static const ::Point& start(const Debug_Line* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Point& end(const Debug_Line* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_back(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Point&
Debug_Line::_Internal::start(const Debug_Line* msg) {
  return *msg->start_;
}
const ::Point&
Debug_Line::_Internal::end(const Debug_Line* msg) {
  return *msg->end_;
}
Debug_Line::Debug_Line()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Line)
}
Debug_Line::Debug_Line(const Debug_Line& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::Point(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::Point(*from.end_);
  } else {
    end_ = nullptr;
  }
  ::memcpy(&forward_, &from.forward_,
    static_cast<size_t>(reinterpret_cast<char*>(&back_) -
    reinterpret_cast<char*>(&forward_)) + sizeof(back_));
  // @@protoc_insertion_point(copy_constructor:Debug_Line)
}

void Debug_Line::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Line_zss_5fdebug_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_) -
      reinterpret_cast<char*>(&start_)) + sizeof(back_));
}

Debug_Line::~Debug_Line() {
  // @@protoc_insertion_point(destructor:Debug_Line)
  SharedDtor();
}

void Debug_Line::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void Debug_Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Line& Debug_Line::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Line_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Line::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  ::memset(&forward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_) -
      reinterpret_cast<char*>(&forward_)) + sizeof(back_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Line::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Point start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Point end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool FORWARD = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_forward(&has_bits);
          forward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool BACK = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_back(&has_bits);
          back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Line::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Line)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Point end = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool FORWARD = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_forward(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool BACK = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_back(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Line)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Line::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::start(this), output);
  }

  // required .Point end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::end(this), output);
  }

  // required bool FORWARD = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->forward(), output);
  }

  // required bool BACK = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->back(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Line)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Line::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Line)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::start(this), target);
  }

  // required .Point end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::end(this), target);
  }

  // required bool FORWARD = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->forward(), target);
  }

  // required bool BACK = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->back(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Line)
  return target;
}

size_t Debug_Line::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Line)
  size_t total_size = 0;

  if (has_start()) {
    // required .Point start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  if (has_end()) {
    // required .Point end = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  if (has_forward()) {
    // required bool FORWARD = 3;
    total_size += 1 + 1;
  }

  if (has_back()) {
    // required bool BACK = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Debug_Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Point start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);

    // required .Point end = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);

    // required bool FORWARD = 3;
    total_size += 1 + 1;

    // required bool BACK = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Line::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Line* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Line>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Line)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Line)
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::Point::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::Point::MergeFrom(from.end());
    }
    if (cached_has_bits & 0x00000004u) {
      forward_ = from.forward_;
    }
    if (cached_has_bits & 0x00000008u) {
      back_ = from.back_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_Line::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_start()) {
    if (!this->start_->IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end_->IsInitialized()) return false;
  }
  return true;
}

void Debug_Line::InternalSwap(Debug_Line* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(forward_, other->forward_);
  swap(back_, other->back_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Line::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Arc::InitAsDefaultInstance() {
  ::_Debug_Arc_default_instance_._instance.get_mutable()->rectangle_ = const_cast< ::Rectangle_*>(
      ::Rectangle_::internal_default_instance());
}
class Debug_Arc::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Arc>()._has_bits_);
  static const ::Rectangle_& rectangle(const Debug_Arc* msg);
  static void set_has_rectangle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Rectangle_&
Debug_Arc::_Internal::rectangle(const Debug_Arc* msg) {
  return *msg->rectangle_;
}
Debug_Arc::Debug_Arc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Arc)
}
Debug_Arc::Debug_Arc(const Debug_Arc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rectangle()) {
    rectangle_ = new ::Rectangle_(*from.rectangle_);
  } else {
    rectangle_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&fill_) -
    reinterpret_cast<char*>(&start_)) + sizeof(fill_));
  // @@protoc_insertion_point(copy_constructor:Debug_Arc)
}

void Debug_Arc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Arc_zss_5fdebug_2eproto.base);
  ::memset(&rectangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fill_) -
      reinterpret_cast<char*>(&rectangle_)) + sizeof(fill_));
}

Debug_Arc::~Debug_Arc() {
  // @@protoc_insertion_point(destructor:Debug_Arc)
  SharedDtor();
}

void Debug_Arc::SharedDtor() {
  if (this != internal_default_instance()) delete rectangle_;
}

void Debug_Arc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Arc& Debug_Arc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Arc_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Arc::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Arc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rectangle_ != nullptr);
    rectangle_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fill_) -
        reinterpret_cast<char*>(&start_)) + sizeof(fill_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Arc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Rectangle_ rectangle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_rectangle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_end(&has_bits);
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool FILL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fill(&has_bits);
          fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Arc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Arc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Rectangle_ rectangle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float start = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float end = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_end(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool FILL = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_fill(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Arc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Arc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Arc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Arc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Rectangle_ rectangle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::rectangle(this), output);
  }

  // required float start = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->start(), output);
  }

  // required float end = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->end(), output);
  }

  // required bool FILL = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->fill(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Arc)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Arc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Arc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Rectangle_ rectangle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::rectangle(this), target);
  }

  // required float start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->start(), target);
  }

  // required float end = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->end(), target);
  }

  // required bool FILL = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->fill(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Arc)
  return target;
}

size_t Debug_Arc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Arc)
  size_t total_size = 0;

  if (has_rectangle()) {
    // required .Rectangle_ rectangle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rectangle_);
  }

  if (has_start()) {
    // required float start = 2;
    total_size += 1 + 4;
  }

  if (has_end()) {
    // required float end = 3;
    total_size += 1 + 4;
  }

  if (has_fill()) {
    // required bool FILL = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Debug_Arc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Arc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Rectangle_ rectangle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rectangle_);

    // required float start = 2;
    total_size += 1 + 4;

    // required float end = 3;
    total_size += 1 + 4;

    // required bool FILL = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Arc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Arc)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Arc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Arc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Arc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Arc)
    MergeFrom(*source);
  }
}

void Debug_Arc::MergeFrom(const Debug_Arc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Arc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rectangle()->::Rectangle_::MergeFrom(from.rectangle());
    }
    if (cached_has_bits & 0x00000002u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_ = from.end_;
    }
    if (cached_has_bits & 0x00000008u) {
      fill_ = from.fill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_Arc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Arc::CopyFrom(const Debug_Arc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Arc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Arc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_rectangle()) {
    if (!this->rectangle_->IsInitialized()) return false;
  }
  return true;
}

void Debug_Arc::InternalSwap(Debug_Arc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rectangle_, other->rectangle_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(fill_, other->fill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Arc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Polygon::InitAsDefaultInstance() {
}
class Debug_Polygon::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Polygon>()._has_bits_);
  static void set_has_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Debug_Polygon::Debug_Polygon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Polygon)
}
Debug_Polygon::Debug_Polygon(const Debug_Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vertex_(from.vertex_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fill_ = from.fill_;
  // @@protoc_insertion_point(copy_constructor:Debug_Polygon)
}

void Debug_Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Polygon_zss_5fdebug_2eproto.base);
  fill_ = false;
}

Debug_Polygon::~Debug_Polygon() {
  // @@protoc_insertion_point(destructor:Debug_Polygon)
  SharedDtor();
}

void Debug_Polygon::SharedDtor() {
}

void Debug_Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Polygon& Debug_Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Polygon_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertex_.Clear();
  fill_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Point vertex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vertex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // required bool FILL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fill(&has_bits);
          fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Polygon::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Polygon)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Point vertex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool FILL = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_fill(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Polygon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Polygon::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Point vertex = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertex_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vertex(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required bool FILL = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->fill(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Polygon)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Polygon::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Point vertex = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertex_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vertex(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // required bool FILL = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->fill(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Polygon)
  return target;
}

size_t Debug_Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool FILL = 2;
  if (has_fill()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Point vertex = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vertex_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vertex(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Polygon)
    MergeFrom(*source);
  }
}

void Debug_Polygon::MergeFrom(const Debug_Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertex_.MergeFrom(from.vertex_);
  if (from.has_fill()) {
    set_fill(from.fill());
  }
}

void Debug_Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Polygon::CopyFrom(const Debug_Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Polygon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->vertex())) return false;
  return true;
}

void Debug_Polygon::InternalSwap(Debug_Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&vertex_)->InternalSwap(CastToBase(&other->vertex_));
  swap(fill_, other->fill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Text::InitAsDefaultInstance() {
  ::_Debug_Text_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
}
class Debug_Text::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Text>()._has_bits_);
  static const ::Point& pos(const Debug_Text* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Point&
Debug_Text::_Internal::pos(const Debug_Text* msg) {
  return *msg->pos_;
}
Debug_Text::Debug_Text()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Text)
}
Debug_Text::Debug_Text(const Debug_Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_pos()) {
    pos_ = new ::Point(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Debug_Text)
}

void Debug_Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Text_zss_5fdebug_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pos_ = nullptr;
}

Debug_Text::~Debug_Text() {
  // @@protoc_insertion_point(destructor:Debug_Text)
  SharedDtor();
}

void Debug_Text::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void Debug_Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Text& Debug_Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Text_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Text::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Point pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_text(), ptr, ctx, "Debug_Text.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Text::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Text)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "Debug_Text.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Text)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Text::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point pos = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pos(this), output);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Debug_Text.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Text)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Text::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point pos = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pos(this), target);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Debug_Text.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Text)
  return target;
}

size_t Debug_Text::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Text)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_pos()) {
    // required .Point pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  return total_size;
}
size_t Debug_Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Text)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());

    // required .Point pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Text)
    MergeFrom(*source);
  }
}

void Debug_Text::MergeFrom(const Debug_Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pos()->::Point::MergeFrom(from.pos());
    }
  }
}

void Debug_Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Text::CopyFrom(const Debug_Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void Debug_Text::InternalSwap(Debug_Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Curve_::InitAsDefaultInstance() {
}
class Debug_Curve_::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Curve_>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Debug_Curve_::Debug_Curve_()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Curve_)
}
Debug_Curve_::Debug_Curve_(const Debug_Curve_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&minlimit_) -
    reinterpret_cast<char*>(&num_)) + sizeof(minlimit_));
  // @@protoc_insertion_point(copy_constructor:Debug_Curve_)
}

void Debug_Curve_::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minlimit_) -
      reinterpret_cast<char*>(&num_)) + sizeof(minlimit_));
}

Debug_Curve_::~Debug_Curve_() {
  // @@protoc_insertion_point(destructor:Debug_Curve_)
  SharedDtor();
}

void Debug_Curve_::SharedDtor() {
}

void Debug_Curve_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Curve_& Debug_Curve_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Curve__zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Curve_::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Curve_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minlimit_) -
        reinterpret_cast<char*>(&num_)) + sizeof(minlimit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Curve_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float maxLimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_maxlimit(&has_bits);
          maxlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float minLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_minlimit(&has_bits);
          minlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Curve_::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Curve_)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxLimit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_maxlimit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float minLimit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_minlimit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Curve_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Curve_)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Curve_::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Curve_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->num(), output);
  }

  // required float maxLimit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->maxlimit(), output);
  }

  // required float minLimit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->minlimit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Curve_)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Curve_::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Curve_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->num(), target);
  }

  // required float maxLimit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->maxlimit(), target);
  }

  // required float minLimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->minlimit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Curve_)
  return target;
}

size_t Debug_Curve_::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Curve_)
  size_t total_size = 0;

  if (has_num()) {
    // required float num = 1;
    total_size += 1 + 4;
  }

  if (has_maxlimit()) {
    // required float maxLimit = 2;
    total_size += 1 + 4;
  }

  if (has_minlimit()) {
    // required float minLimit = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Debug_Curve_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Curve_)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float num = 1;
    total_size += 1 + 4;

    // required float maxLimit = 2;
    total_size += 1 + 4;

    // required float minLimit = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Curve_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Curve_)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Curve_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Curve_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Curve_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Curve_)
    MergeFrom(*source);
  }
}

void Debug_Curve_::MergeFrom(const Debug_Curve_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Curve_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxlimit_ = from.maxlimit_;
    }
    if (cached_has_bits & 0x00000004u) {
      minlimit_ = from.minlimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_Curve_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Curve_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Curve_::CopyFrom(const Debug_Curve_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Curve_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Curve_::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Debug_Curve_::InternalSwap(Debug_Curve_* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_, other->num_);
  swap(maxlimit_, other->maxlimit_);
  swap(minlimit_, other->minlimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Curve_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Curve::InitAsDefaultInstance() {
  ::_Debug_Curve_default_instance_._instance.get_mutable()->start_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_Debug_Curve_default_instance_._instance.get_mutable()->p1_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_Debug_Curve_default_instance_._instance.get_mutable()->p2_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_Debug_Curve_default_instance_._instance.get_mutable()->end_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
}
class Debug_Curve::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Curve>()._has_bits_);
  static const ::Point& start(const Debug_Curve* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Point& p1(const Debug_Curve* msg);
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Point& p2(const Debug_Curve* msg);
  static void set_has_p2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Point& end(const Debug_Curve* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Point&
Debug_Curve::_Internal::start(const Debug_Curve* msg) {
  return *msg->start_;
}
const ::Point&
Debug_Curve::_Internal::p1(const Debug_Curve* msg) {
  return *msg->p1_;
}
const ::Point&
Debug_Curve::_Internal::p2(const Debug_Curve* msg) {
  return *msg->p2_;
}
const ::Point&
Debug_Curve::_Internal::end(const Debug_Curve* msg) {
  return *msg->end_;
}
Debug_Curve::Debug_Curve()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Curve)
}
Debug_Curve::Debug_Curve(const Debug_Curve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::Point(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_p1()) {
    p1_ = new ::Point(*from.p1_);
  } else {
    p1_ = nullptr;
  }
  if (from.has_p2()) {
    p2_ = new ::Point(*from.p2_);
  } else {
    p2_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::Point(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Debug_Curve)
}

void Debug_Curve::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Curve_zss_5fdebug_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Debug_Curve::~Debug_Curve() {
  // @@protoc_insertion_point(destructor:Debug_Curve)
  SharedDtor();
}

void Debug_Curve::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete p1_;
  if (this != internal_default_instance()) delete p2_;
  if (this != internal_default_instance()) delete end_;
}

void Debug_Curve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Curve& Debug_Curve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Curve_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Curve::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Curve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(p1_ != nullptr);
      p1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(p2_ != nullptr);
      p2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Curve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Point start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Point p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_p1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Point p2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_p2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Point end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Curve::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Curve)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Point p1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Point p2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_p2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Point end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Curve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Curve)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Curve::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Curve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::start(this), output);
  }

  // required .Point p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::p1(this), output);
  }

  // required .Point p2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::p2(this), output);
  }

  // required .Point end = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::end(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Curve)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Curve::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Curve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Point start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::start(this), target);
  }

  // required .Point p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::p1(this), target);
  }

  // required .Point p2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::p2(this), target);
  }

  // required .Point end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::end(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Curve)
  return target;
}

size_t Debug_Curve::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Curve)
  size_t total_size = 0;

  if (has_start()) {
    // required .Point start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  if (has_p1()) {
    // required .Point p1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p1_);
  }

  if (has_p2()) {
    // required .Point p2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p2_);
  }

  if (has_end()) {
    // required .Point end = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return total_size;
}
size_t Debug_Curve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Curve)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Point start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);

    // required .Point p1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p1_);

    // required .Point p2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p2_);

    // required .Point end = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Curve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Curve)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Curve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Curve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Curve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Curve)
    MergeFrom(*source);
  }
}

void Debug_Curve::MergeFrom(const Debug_Curve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Curve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::Point::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_p1()->::Point::MergeFrom(from.p1());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_p2()->::Point::MergeFrom(from.p2());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_end()->::Point::MergeFrom(from.end());
    }
  }
}

void Debug_Curve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Curve::CopyFrom(const Debug_Curve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Curve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Curve::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_start()) {
    if (!this->start_->IsInitialized()) return false;
  }
  if (has_p1()) {
    if (!this->p1_->IsInitialized()) return false;
  }
  if (has_p2()) {
    if (!this->p2_->IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end_->IsInitialized()) return false;
  }
  return true;
}

void Debug_Curve::InternalSwap(Debug_Curve* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_, other->start_);
  swap(p1_, other->p1_);
  swap(p2_, other->p2_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Curve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Points::InitAsDefaultInstance() {
}
class Debug_Points::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Points>()._has_bits_);
};

Debug_Points::Debug_Points()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Points)
}
Debug_Points::Debug_Points(const Debug_Points& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Debug_Points)
}

void Debug_Points::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Points_zss_5fdebug_2eproto.base);
}

Debug_Points::~Debug_Points() {
  // @@protoc_insertion_point(destructor:Debug_Points)
  SharedDtor();
}

void Debug_Points::SharedDtor() {
}

void Debug_Points::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Points& Debug_Points::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Points_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Points::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Points::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Points::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Points)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Point point = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Points)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Points)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Points::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Points)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Points::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Points)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Points)
  return target;
}

size_t Debug_Points::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Points)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Point point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Points::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Points)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Points* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Points>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Points)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Points)
    MergeFrom(*source);
  }
}

void Debug_Points::MergeFrom(const Debug_Points& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Points)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void Debug_Points::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Points::CopyFrom(const Debug_Points& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Points)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Points::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void Debug_Points::InternalSwap(Debug_Points* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Points::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Msg::InitAsDefaultInstance() {
  ::_Debug_Msg_default_instance_._instance.get_mutable()->arc_ = const_cast< ::Debug_Arc*>(
      ::Debug_Arc::internal_default_instance());
  ::_Debug_Msg_default_instance_._instance.get_mutable()->line_ = const_cast< ::Debug_Line*>(
      ::Debug_Line::internal_default_instance());
  ::_Debug_Msg_default_instance_._instance.get_mutable()->text_ = const_cast< ::Debug_Text*>(
      ::Debug_Text::internal_default_instance());
  ::_Debug_Msg_default_instance_._instance.get_mutable()->robot_ = const_cast< ::Debug_Robot*>(
      ::Debug_Robot::internal_default_instance());
  ::_Debug_Msg_default_instance_._instance.get_mutable()->curve_ = const_cast< ::Debug_Curve_*>(
      ::Debug_Curve_::internal_default_instance());
  ::_Debug_Msg_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::Debug_Polygon*>(
      ::Debug_Polygon::internal_default_instance());
  ::_Debug_Msg_default_instance_._instance.get_mutable()->points_ = const_cast< ::Debug_Points*>(
      ::Debug_Points::internal_default_instance());
}
class Debug_Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Msg>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::Debug_Arc& arc(const Debug_Msg* msg);
  static void set_has_arc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Debug_Line& line(const Debug_Msg* msg);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Debug_Text& text(const Debug_Msg* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Debug_Robot& robot(const Debug_Msg* msg);
  static void set_has_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Debug_Curve_& curve(const Debug_Msg* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Debug_Polygon& polygon(const Debug_Msg* msg);
  static void set_has_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Debug_Points& points(const Debug_Msg* msg);
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::Debug_Arc&
Debug_Msg::_Internal::arc(const Debug_Msg* msg) {
  return *msg->arc_;
}
const ::Debug_Line&
Debug_Msg::_Internal::line(const Debug_Msg* msg) {
  return *msg->line_;
}
const ::Debug_Text&
Debug_Msg::_Internal::text(const Debug_Msg* msg) {
  return *msg->text_;
}
const ::Debug_Robot&
Debug_Msg::_Internal::robot(const Debug_Msg* msg) {
  return *msg->robot_;
}
const ::Debug_Curve_&
Debug_Msg::_Internal::curve(const Debug_Msg* msg) {
  return *msg->curve_;
}
const ::Debug_Polygon&
Debug_Msg::_Internal::polygon(const Debug_Msg* msg) {
  return *msg->polygon_;
}
const ::Debug_Points&
Debug_Msg::_Internal::points(const Debug_Msg* msg) {
  return *msg->points_;
}
Debug_Msg::Debug_Msg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Msg)
}
Debug_Msg::Debug_Msg(const Debug_Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_arc()) {
    arc_ = new ::Debug_Arc(*from.arc_);
  } else {
    arc_ = nullptr;
  }
  if (from.has_line()) {
    line_ = new ::Debug_Line(*from.line_);
  } else {
    line_ = nullptr;
  }
  if (from.has_text()) {
    text_ = new ::Debug_Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from.has_robot()) {
    robot_ = new ::Debug_Robot(*from.robot_);
  } else {
    robot_ = nullptr;
  }
  if (from.has_curve()) {
    curve_ = new ::Debug_Curve_(*from.curve_);
  } else {
    curve_ = nullptr;
  }
  if (from.has_polygon()) {
    polygon_ = new ::Debug_Polygon(*from.polygon_);
  } else {
    polygon_ = nullptr;
  }
  if (from.has_points()) {
    points_ = new ::Debug_Points(*from.points_);
  } else {
    points_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:Debug_Msg)
}

void Debug_Msg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Msg_zss_5fdebug_2eproto.base);
  ::memset(&arc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&arc_)) + sizeof(color_));
}

Debug_Msg::~Debug_Msg() {
  // @@protoc_insertion_point(destructor:Debug_Msg)
  SharedDtor();
}

void Debug_Msg::SharedDtor() {
  if (this != internal_default_instance()) delete arc_;
  if (this != internal_default_instance()) delete line_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete robot_;
  if (this != internal_default_instance()) delete curve_;
  if (this != internal_default_instance()) delete polygon_;
  if (this != internal_default_instance()) delete points_;
}

void Debug_Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Msg& Debug_Msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Msg_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(arc_ != nullptr);
      arc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(line_ != nullptr);
      line_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(text_ != nullptr);
      text_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(robot_ != nullptr);
      robot_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(curve_ != nullptr);
      curve_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(polygon_ != nullptr);
      polygon_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(points_ != nullptr);
      points_->Clear();
    }
  }
  type_ = 0;
  color_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .Debug_Msg.Debug_Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Debug_Msg_Debug_Type_IsValid(val))) {
            set_type(static_cast<::Debug_Msg_Debug_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .Debug_Msg.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Debug_Msg_Color_IsValid(val))) {
            set_color(static_cast<::Debug_Msg_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Debug_Arc arc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_arc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Debug_Line line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Debug_Text text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Debug_Robot robot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_robot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Debug_Curve_ curve = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_curve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Debug_Polygon polygon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Debug_Points points = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Msg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Msg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Debug_Msg.Debug_Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Debug_Msg_Debug_Type_IsValid(value)) {
            set_type(static_cast< ::Debug_Msg_Debug_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Debug_Msg.Color color = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Debug_Msg_Color_IsValid(value)) {
            set_color(static_cast< ::Debug_Msg_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Debug_Arc arc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_arc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Debug_Line line = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Debug_Text text = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Debug_Robot robot = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Debug_Curve_ curve = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Debug_Polygon polygon = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Debug_Points points = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Msg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Msg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Debug_Msg.Debug_Type type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .Debug_Msg.Color color = 2;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // optional .Debug_Arc arc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::arc(this), output);
  }

  // optional .Debug_Line line = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::line(this), output);
  }

  // optional .Debug_Text text = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::text(this), output);
  }

  // optional .Debug_Robot robot = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::robot(this), output);
  }

  // optional .Debug_Curve_ curve = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::curve(this), output);
  }

  // optional .Debug_Polygon polygon = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::polygon(this), output);
  }

  // optional .Debug_Points points = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::points(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Msg)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Msg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Debug_Msg.Debug_Type type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .Debug_Msg.Color color = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // optional .Debug_Arc arc = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::arc(this), target);
  }

  // optional .Debug_Line line = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::line(this), target);
  }

  // optional .Debug_Text text = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::text(this), target);
  }

  // optional .Debug_Robot robot = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::robot(this), target);
  }

  // optional .Debug_Curve_ curve = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::curve(this), target);
  }

  // optional .Debug_Polygon polygon = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::polygon(this), target);
  }

  // optional .Debug_Points points = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::points(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Msg)
  return target;
}

size_t Debug_Msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Msg)
  size_t total_size = 0;

  if (has_type()) {
    // required .Debug_Msg.Debug_Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_color()) {
    // required .Debug_Msg.Color color = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color());
  }

  return total_size;
}
size_t Debug_Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000180) ^ 0x00000180) == 0) {  // All required fields are present.
    // required .Debug_Msg.Debug_Type type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());

    // required .Debug_Msg.Color color = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .Debug_Arc arc = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *arc_);
    }

    // optional .Debug_Line line = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *line_);
    }

    // optional .Debug_Text text = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_);
    }

    // optional .Debug_Robot robot = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *robot_);
    }

    // optional .Debug_Curve_ curve = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_);
    }

    // optional .Debug_Polygon polygon = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

    // optional .Debug_Points points = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *points_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Msg)
    MergeFrom(*source);
  }
}

void Debug_Msg::MergeFrom(const Debug_Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_arc()->::Debug_Arc::MergeFrom(from.arc());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_line()->::Debug_Line::MergeFrom(from.line());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_text()->::Debug_Text::MergeFrom(from.text());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_robot()->::Debug_Robot::MergeFrom(from.robot());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_curve()->::Debug_Curve_::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_polygon()->::Debug_Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_points()->::Debug_Points::MergeFrom(from.points());
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_color(from.color());
  }
}

void Debug_Msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Msg::CopyFrom(const Debug_Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000180) != 0x00000180) return false;
  if (has_arc()) {
    if (!this->arc_->IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line_->IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text_->IsInitialized()) return false;
  }
  if (has_robot()) {
    if (!this->robot_->IsInitialized()) return false;
  }
  if (has_curve()) {
    if (!this->curve_->IsInitialized()) return false;
  }
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized()) return false;
  }
  if (has_points()) {
    if (!this->points_->IsInitialized()) return false;
  }
  return true;
}

void Debug_Msg::InternalSwap(Debug_Msg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(arc_, other->arc_);
  swap(line_, other->line_);
  swap(text_, other->text_);
  swap(robot_, other->robot_);
  swap(curve_, other->curve_);
  swap(polygon_, other->polygon_);
  swap(points_, other->points_);
  swap(type_, other->type_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Msgs::InitAsDefaultInstance() {
}
class Debug_Msgs::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Msgs>()._has_bits_);
};

Debug_Msgs::Debug_Msgs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Msgs)
}
Debug_Msgs::Debug_Msgs(const Debug_Msgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Debug_Msgs)
}

void Debug_Msgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Msgs_zss_5fdebug_2eproto.base);
}

Debug_Msgs::~Debug_Msgs() {
  // @@protoc_insertion_point(destructor:Debug_Msgs)
  SharedDtor();
}

void Debug_Msgs::SharedDtor() {
}

void Debug_Msgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Msgs& Debug_Msgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Msgs_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Msgs::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Msgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Msgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Debug_Msg msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Msgs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Msgs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Debug_Msg msgs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Msgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Msgs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Msgs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Msgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Debug_Msg msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msgs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->msgs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Msgs)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Msgs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Msgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Debug_Msg msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msgs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->msgs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Msgs)
  return target;
}

size_t Debug_Msgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Msgs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Debug_Msg msgs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->msgs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->msgs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Msgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Msgs)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Msgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Msgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Msgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Msgs)
    MergeFrom(*source);
  }
}

void Debug_Msgs::MergeFrom(const Debug_Msgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Msgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void Debug_Msgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Msgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Msgs::CopyFrom(const Debug_Msgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Msgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Msgs::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->msgs())) return false;
  return true;
}

void Debug_Msgs::InternalSwap(Debug_Msgs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&msgs_)->InternalSwap(CastToBase(&other->msgs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Msgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Score::InitAsDefaultInstance() {
}
class Debug_Score::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Score>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Debug_Score::Debug_Score()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Score)
}
Debug_Score::Debug_Score(const Debug_Score& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      p_(from.p_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:Debug_Score)
}

void Debug_Score::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Score_zss_5fdebug_2eproto.base);
  color_ = 0;
}

Debug_Score::~Debug_Score() {
  // @@protoc_insertion_point(destructor:Debug_Score)
  SharedDtor();
}

void Debug_Score::SharedDtor() {
}

void Debug_Score::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Score& Debug_Score::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Score_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Score::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p_.Clear();
  color_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Score::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Point p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_p(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Score::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Score)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_color(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Point p = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Score)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Score)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Score::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  // repeated .Point p = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->p_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->p(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Score)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Score::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Score)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // repeated .Point p = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->p_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->p(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Score)
  return target;
}

size_t Debug_Score::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Score)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 color = 1;
  if (has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->color());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Point p = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->p_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->p(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Score::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Score)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Score* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Score>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Score)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Score)
    MergeFrom(*source);
  }
}

void Debug_Score::MergeFrom(const Debug_Score& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Score)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  p_.MergeFrom(from.p_);
  if (from.has_color()) {
    set_color(from.color());
  }
}

void Debug_Score::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Score::CopyFrom(const Debug_Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->p())) return false;
  return true;
}

void Debug_Score::InternalSwap(Debug_Score* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&p_)->InternalSwap(CastToBase(&other->p_));
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Score::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug_Scores::InitAsDefaultInstance() {
}
class Debug_Scores::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug_Scores>()._has_bits_);
};

Debug_Scores::Debug_Scores()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Scores)
}
Debug_Scores::Debug_Scores(const Debug_Scores& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scores_(from.scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Debug_Scores)
}

void Debug_Scores::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_Scores_zss_5fdebug_2eproto.base);
}

Debug_Scores::~Debug_Scores() {
  // @@protoc_insertion_point(destructor:Debug_Scores)
  SharedDtor();
}

void Debug_Scores::SharedDtor() {
}

void Debug_Scores::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug_Scores& Debug_Scores::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_Scores_zss_5fdebug_2eproto.base);
  return *internal_default_instance();
}


void Debug_Scores::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Scores)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scores_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Debug_Scores::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Debug_Score scores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Debug_Scores::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Scores)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Debug_Score scores = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Scores)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Scores)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Debug_Scores::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Scores)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Debug_Score scores = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scores_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->scores(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Scores)
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug_Scores::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Scores)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Debug_Score scores = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scores_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->scores(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Scores)
  return target;
}

size_t Debug_Scores::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Scores)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Debug_Score scores = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->scores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->scores(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug_Scores::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Scores)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Scores* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug_Scores>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Scores)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Scores)
    MergeFrom(*source);
  }
}

void Debug_Scores::MergeFrom(const Debug_Scores& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Scores)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scores_.MergeFrom(from.scores_);
}

void Debug_Scores::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Scores)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Scores::CopyFrom(const Debug_Scores& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Scores)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Scores::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->scores())) return false;
  return true;
}

void Debug_Scores::InternalSwap(Debug_Scores* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&scores_)->InternalSwap(CastToBase(&other->scores_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug_Scores::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Point* Arena::CreateMaybeMessage< ::Point >(Arena* arena) {
  return Arena::CreateInternal< ::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::Rectangle_* Arena::CreateMaybeMessage< ::Rectangle_ >(Arena* arena) {
  return Arena::CreateInternal< ::Rectangle_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Robot* Arena::CreateMaybeMessage< ::Debug_Robot >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Robot >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Line* Arena::CreateMaybeMessage< ::Debug_Line >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Line >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Arc* Arena::CreateMaybeMessage< ::Debug_Arc >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Arc >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Polygon* Arena::CreateMaybeMessage< ::Debug_Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Text* Arena::CreateMaybeMessage< ::Debug_Text >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Text >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Curve_* Arena::CreateMaybeMessage< ::Debug_Curve_ >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Curve_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Curve* Arena::CreateMaybeMessage< ::Debug_Curve >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Curve >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Points* Arena::CreateMaybeMessage< ::Debug_Points >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Points >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Msg* Arena::CreateMaybeMessage< ::Debug_Msg >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Msg >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Msgs* Arena::CreateMaybeMessage< ::Debug_Msgs >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Msgs >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Score* Arena::CreateMaybeMessage< ::Debug_Score >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Score >(arena);
}
template<> PROTOBUF_NOINLINE ::Debug_Scores* Arena::CreateMaybeMessage< ::Debug_Scores >(Arena* arena) {
  return Arena::CreateInternal< ::Debug_Scores >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
